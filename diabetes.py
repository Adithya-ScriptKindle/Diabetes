# -*- coding: utf-8 -*-
"""Diabetes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mzUZKmsOnuCe25DPYZYwJ2ZLHNqxUCwI
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

data=pd.read_csv('https://raw.githubusercontent.com/Adithya-Suresh/diabetics/master/diabetes.csv')
#data=data.values.reshape(-1,9)
dt=pd.DataFrame(data)
#dt.columns=['Pregnancies','Glucose','BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction','Age','Outcome']
print(dt.head(10))

print(dt.info())

print(dt.describe())
sns.heatmap(dt.corr(),cmap='YlGnBu')

dt.plot.scatter(x='Pregnancies',y='Glucose')

dt.plot.scatter(x='BloodPressure',y='SkinThickness')



dt=dt.drop(dt.index[dt.Pregnancies>=11.5],axis=0)
dt=dt.drop(dt.index[dt.Glucose>=185],axis=0)
dt=dt.drop(dt.index[dt.BloodPressure>=92],axis=0)
dt=dt.drop(dt.index[dt.BloodPressure<=37],axis=0)
dt=dt.drop(dt.index[dt.BMI>=45],axis=0)
dt=dt.drop(dt.index[dt.DiabetesPedigreeFunction>=1.2],axis=0)
dt.plot.scatter(x='Pregnancies',y='Glucose')
dt.plot.scatter(x='BloodPressure',y='SkinThickness')
dt.plot.scatter(x='BMI',y='DiabetesPedigreeFunction')

#h={'Outcome':{1:'Yes',0:'No'}}
#dt=dt.replace(h)
print(dt.head(10))
#dt['Outcome']=pd.to_numeric(dt['Outcome'],downcast='integer')
X=pd.DataFrame(dt)
X=X.drop(['Outcome'],axis=1)
y=dt['Outcome']
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.20,random_state=0)

from sklearn.naive_bayes import GaussianNB
classifier = GaussianNB()
classifier.fit(X_train,y_train)
y_p=classifier.predict(X_test)
from sklearn.metrics import accuracy_score
acc = accuracy_score(y_test, y_p)
print(acc)

""""from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)
classifier.fit(X_train,y_train)
y_p=classifier.predict(X_test)
from sklearn.metrics import accuracy_score
acc = accuracy_score(y_test, y_p)
print(acc)"""

#from sklearn.tree import DecisionTreeClassifier
#classifier = DecisionTreeClassifier(random_state = 0)
#classifier.fit(X_train,y_train)
#y_p=classifier.predict(X_test)
#from sklearn.metrics import accuracy_score
#acc = accuracy_score(y_test, y_p)
#print(acc)

""""from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)
classifier.fit(X_train,y_train)
y_p=classifier.predict(X_test)
from sklearn.metrics import accuracy_score
acc = accuracy_score(y_test, y_p)
print(acc)

"from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression()
classifier.fit(X_train,y_train)
y_p=classifier.predict(X_test)
from sklearn.metrics import accuracy_score
acc = accuracy_score(y_test, y_p)
print(acc)
"""

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_p)
labels =['Pr 0', 'Pr 1']
print(*labels)
for line in cm:
  print(*line)

#print(X_train,y_train)
classifier.predict_proba([[3,78,50,32,88,31.0,0.248,26]])